// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  I7-4000
// DateTime: 20.05.2019 17:21:19
// UserName: ????????
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,TYPE=5,CYCLE=6,
    INUM=7,RNUM=8,ID=9,ASSIGN=10,SEMICOLON=11,WHILE=12,
    DO=13,REPEAT=14,UNTIL=15,FOR=16,TO=17,IF=18,
    THEN=19,ELSE=20,WRITE=21,LEFT_BRACKET=22,RIGHT_BRACKET=23,COMMA=24,
    PLUS=25,MINUS=26,MULT=27,DIV=28,LEFT_M_BRACKET=29,RIGHT_M_BRACKET=30,
    LEFT_F_BRACKET=31,RIGHT_F_BRACKET=32,GOTO=33,COLON=34,CASE=35,BREAK=36,
    SWITCH=37};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<int,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<int, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Ёти объ€влени€ добавл€ютс€ в класс GPPGParser, представл€ющий собой парсер, генерируемый системой gppg
//"{"  LEFT_M_BRACKET
//"}"  RIGHT_M_BRACKET
//"["  LEFT_F_BRACKET
//"]"  RIGHT_F_BRACKET
    public Parser(AbstractScanner<int, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[56];
  private static State[] states = new State[125];
  private static string[] nonTerms = new string[] {
      "progr", "$accept", "funk", "stlist", "forhead", "assign", "eqv", "ident", 
      "expr", "idlist", "dig", "statement", "var", "mono", "T", "F", "bool", 
      };

  static Parser() {
    states[0] = new State(new int[]{5,3},new int[]{-1,1});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{9,113},new int[]{-3,4});
    states[4] = new State(new int[]{29,5});
    states[5] = new State(new int[]{5,20,9,58,25,77,26,80,16,-16},new int[]{-4,6,-12,87,-13,19,-6,66,-8,68,-14,85});
    states[6] = new State(new int[]{16,88,5,20,9,58,25,77,26,80},new int[]{-5,7,-12,18,-13,19,-6,66,-8,68,-14,85});
    states[7] = new State(new int[]{29,8});
    states[8] = new State(new int[]{5,20,9,58,25,77,26,80,16,-16},new int[]{-4,9,-12,87,-13,19,-6,66,-8,68,-14,85});
    states[9] = new State(new int[]{16,88,5,20,9,58,25,77,26,80},new int[]{-5,10,-12,18,-13,19,-6,66,-8,68,-14,85});
    states[10] = new State(new int[]{29,11});
    states[11] = new State(new int[]{5,20,9,58,25,77,26,80,30,-16},new int[]{-4,12,-12,87,-13,19,-6,66,-8,68,-14,85});
    states[12] = new State(new int[]{30,13,5,20,9,58,25,77,26,80},new int[]{-12,18,-13,19,-6,66,-8,68,-14,85});
    states[13] = new State(new int[]{5,20,9,58,25,77,26,80,30,-16},new int[]{-4,14,-12,87,-13,19,-6,66,-8,68,-14,85});
    states[14] = new State(new int[]{30,15,5,20,9,58,25,77,26,80},new int[]{-12,18,-13,19,-6,66,-8,68,-14,85});
    states[15] = new State(new int[]{5,20,9,58,25,77,26,80,30,-16},new int[]{-4,16,-12,87,-13,19,-6,66,-8,68,-14,85});
    states[16] = new State(new int[]{30,17,5,20,9,58,25,77,26,80},new int[]{-12,18,-13,19,-6,66,-8,68,-14,85});
    states[17] = new State(-2);
    states[18] = new State(-15);
    states[19] = new State(-17);
    states[20] = new State(new int[]{9,21});
    states[21] = new State(new int[]{11,22,10,23,31,54});
    states[22] = new State(-20);
    states[23] = new State(new int[]{9,31,8,33,7,34,22,35},new int[]{-9,24,-15,43,-16,42,-8,44,-11,47});
    states[24] = new State(new int[]{11,25,25,26,26,38});
    states[25] = new State(-21);
    states[26] = new State(new int[]{9,31,8,33,7,34,22,35},new int[]{-15,27,-16,42,-8,30,-11,32});
    states[27] = new State(new int[]{27,28,28,40,11,-41,25,-41,26,-41,23,-41,24,-41});
    states[28] = new State(new int[]{9,31,8,33,7,34,22,35},new int[]{-16,29,-8,30,-11,32});
    states[29] = new State(-49);
    states[30] = new State(-51);
    states[31] = new State(-25);
    states[32] = new State(-52);
    states[33] = new State(-6);
    states[34] = new State(-7);
    states[35] = new State(new int[]{9,31,8,33,7,34,22,35},new int[]{-9,36,-15,43,-16,42,-8,44,-11,47});
    states[36] = new State(new int[]{23,37,25,26,26,38});
    states[37] = new State(-53);
    states[38] = new State(new int[]{9,31,8,33,7,34,22,35},new int[]{-15,39,-16,42,-8,30,-11,32});
    states[39] = new State(new int[]{27,28,28,40,11,-42,25,-42,26,-42,23,-42,24,-42});
    states[40] = new State(new int[]{9,31,8,33,7,34,22,35},new int[]{-16,41,-8,30,-11,32});
    states[41] = new State(-50);
    states[42] = new State(-48);
    states[43] = new State(new int[]{27,28,28,40,11,-36,25,-36,26,-36,23,-36,24,-36});
    states[44] = new State(new int[]{25,45,26,52,27,-51,28,-51,11,-51,23,-51,24,-51});
    states[45] = new State(new int[]{9,31,8,33,7,34,22,35},new int[]{-9,46,-15,43,-16,42,-8,44,-11,47});
    states[46] = new State(new int[]{25,26,26,38,11,-39,23,-39,24,-39});
    states[47] = new State(new int[]{25,48,26,50,27,-52,28,-52,11,-43,23,-43,24,-43});
    states[48] = new State(new int[]{9,31,8,33,7,34,22,35},new int[]{-9,49,-15,43,-16,42,-8,44,-11,47});
    states[49] = new State(new int[]{25,26,26,38,11,-37,23,-37,24,-37});
    states[50] = new State(new int[]{9,31,8,33,7,34,22,35},new int[]{-9,51,-15,43,-16,42,-8,44,-11,47});
    states[51] = new State(new int[]{25,26,26,38,11,-38,23,-38,24,-38});
    states[52] = new State(new int[]{9,31,8,33,7,34,22,35},new int[]{-9,53,-15,43,-16,42,-8,44,-11,47});
    states[53] = new State(new int[]{25,26,26,38,11,-40,23,-40,24,-40});
    states[54] = new State(new int[]{8,33,7,34},new int[]{-11,55});
    states[55] = new State(new int[]{32,56});
    states[56] = new State(new int[]{11,57});
    states[57] = new State(-22);
    states[58] = new State(new int[]{5,59,10,-25,25,-25,26,-25});
    states[59] = new State(new int[]{9,60});
    states[60] = new State(new int[]{11,61,31,62});
    states[61] = new State(-23);
    states[62] = new State(new int[]{8,33,7,34},new int[]{-11,63});
    states[63] = new State(new int[]{32,64});
    states[64] = new State(new int[]{11,65});
    states[65] = new State(-24);
    states[66] = new State(new int[]{11,67});
    states[67] = new State(-18);
    states[68] = new State(new int[]{10,69,25,83,26,84});
    states[69] = new State(new int[]{9,31,8,33,7,34,22,35,25,77,26,80},new int[]{-9,70,-14,71,-15,43,-16,42,-8,72,-11,47});
    states[70] = new State(new int[]{25,26,26,38,11,-26});
    states[71] = new State(-27);
    states[72] = new State(new int[]{25,73,26,75,27,-51,28,-51,11,-51});
    states[73] = new State(new int[]{25,74,9,31,8,33,7,34,22,35},new int[]{-9,46,-15,43,-16,42,-8,44,-11,47});
    states[74] = new State(-44);
    states[75] = new State(new int[]{26,76,9,31,8,33,7,34,22,35},new int[]{-9,53,-15,43,-16,42,-8,44,-11,47});
    states[76] = new State(-46);
    states[77] = new State(new int[]{25,78});
    states[78] = new State(new int[]{9,31},new int[]{-8,79});
    states[79] = new State(-45);
    states[80] = new State(new int[]{26,81});
    states[81] = new State(new int[]{9,31},new int[]{-8,82});
    states[82] = new State(-47);
    states[83] = new State(new int[]{25,74});
    states[84] = new State(new int[]{26,76});
    states[85] = new State(new int[]{11,86});
    states[86] = new State(-19);
    states[87] = new State(-14);
    states[88] = new State(new int[]{22,89});
    states[89] = new State(new int[]{9,31},new int[]{-6,90,-8,112});
    states[90] = new State(new int[]{11,91});
    states[91] = new State(new int[]{8,33,7,34,9,31},new int[]{-7,92,-11,98,-8,105});
    states[92] = new State(new int[]{11,93});
    states[93] = new State(new int[]{9,31},new int[]{-8,94});
    states[94] = new State(new int[]{10,95});
    states[95] = new State(new int[]{9,31,8,33,7,34,22,35},new int[]{-9,96,-15,43,-16,42,-8,44,-11,47});
    states[96] = new State(new int[]{23,97,25,26,26,38});
    states[97] = new State(-3);
    states[98] = new State(new int[]{10,99});
    states[99] = new State(new int[]{10,102,8,33,7,34,9,31},new int[]{-11,100,-8,101});
    states[100] = new State(-28);
    states[101] = new State(-30);
    states[102] = new State(new int[]{8,33,7,34,9,31},new int[]{-11,103,-8,104});
    states[103] = new State(-32);
    states[104] = new State(-34);
    states[105] = new State(new int[]{10,106});
    states[106] = new State(new int[]{10,109,8,33,7,34,9,31},new int[]{-11,107,-8,108});
    states[107] = new State(-29);
    states[108] = new State(-31);
    states[109] = new State(new int[]{8,33,7,34,9,31},new int[]{-11,110,-8,111});
    states[110] = new State(-33);
    states[111] = new State(-35);
    states[112] = new State(new int[]{10,69});
    states[113] = new State(new int[]{22,114});
    states[114] = new State(new int[]{23,115,8,33,7,34,9,31,22,35},new int[]{-10,116,-11,122,-8,123,-9,124,-15,43,-16,42});
    states[115] = new State(-4);
    states[116] = new State(new int[]{23,117,24,118});
    states[117] = new State(-5);
    states[118] = new State(new int[]{8,33,7,34,9,31,22,35},new int[]{-11,119,-8,120,-9,121,-15,43,-16,42});
    states[119] = new State(new int[]{25,48,26,50,23,-11,24,-11,27,-52,28,-52});
    states[120] = new State(new int[]{25,45,26,52,23,-12,24,-12,27,-51,28,-51});
    states[121] = new State(new int[]{25,26,26,38,23,-13,24,-13});
    states[122] = new State(new int[]{25,48,26,50,23,-8,24,-8,27,-52,28,-52});
    states[123] = new State(new int[]{25,45,26,52,23,-9,24,-9,27,-51,28,-51});
    states[124] = new State(new int[]{25,26,26,38,23,-10,24,-10});

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{5,-3,29,-4,-5,29,-4,-5,29,-4,30,-4,30,-4,30});
    rules[3] = new Rule(-5, new int[]{16,22,-6,11,-7,11,-8,10,-9,23});
    rules[4] = new Rule(-3, new int[]{9,22,23});
    rules[5] = new Rule(-3, new int[]{9,22,-10,23});
    rules[6] = new Rule(-11, new int[]{8});
    rules[7] = new Rule(-11, new int[]{7});
    rules[8] = new Rule(-10, new int[]{-11});
    rules[9] = new Rule(-10, new int[]{-8});
    rules[10] = new Rule(-10, new int[]{-9});
    rules[11] = new Rule(-10, new int[]{-10,24,-11});
    rules[12] = new Rule(-10, new int[]{-10,24,-8});
    rules[13] = new Rule(-10, new int[]{-10,24,-9});
    rules[14] = new Rule(-4, new int[]{-12});
    rules[15] = new Rule(-4, new int[]{-4,-12});
    rules[16] = new Rule(-4, new int[]{});
    rules[17] = new Rule(-12, new int[]{-13});
    rules[18] = new Rule(-12, new int[]{-6,11});
    rules[19] = new Rule(-12, new int[]{-14,11});
    rules[20] = new Rule(-13, new int[]{5,9,11});
    rules[21] = new Rule(-13, new int[]{5,9,10,-9,11});
    rules[22] = new Rule(-13, new int[]{5,9,31,-11,32,11});
    rules[23] = new Rule(-13, new int[]{9,5,9,11});
    rules[24] = new Rule(-13, new int[]{9,5,9,31,-11,32,11});
    rules[25] = new Rule(-8, new int[]{9});
    rules[26] = new Rule(-6, new int[]{-8,10,-9});
    rules[27] = new Rule(-6, new int[]{-8,10,-14});
    rules[28] = new Rule(-7, new int[]{-11,10,-11});
    rules[29] = new Rule(-7, new int[]{-8,10,-11});
    rules[30] = new Rule(-7, new int[]{-11,10,-8});
    rules[31] = new Rule(-7, new int[]{-8,10,-8});
    rules[32] = new Rule(-7, new int[]{-11,10,10,-11});
    rules[33] = new Rule(-7, new int[]{-8,10,10,-11});
    rules[34] = new Rule(-7, new int[]{-11,10,10,-8});
    rules[35] = new Rule(-7, new int[]{-8,10,10,-8});
    rules[36] = new Rule(-9, new int[]{-15});
    rules[37] = new Rule(-9, new int[]{-11,25,-9});
    rules[38] = new Rule(-9, new int[]{-11,26,-9});
    rules[39] = new Rule(-9, new int[]{-8,25,-9});
    rules[40] = new Rule(-9, new int[]{-8,26,-9});
    rules[41] = new Rule(-9, new int[]{-9,25,-15});
    rules[42] = new Rule(-9, new int[]{-9,26,-15});
    rules[43] = new Rule(-9, new int[]{-11});
    rules[44] = new Rule(-14, new int[]{-8,25,25});
    rules[45] = new Rule(-14, new int[]{25,25,-8});
    rules[46] = new Rule(-14, new int[]{-8,26,26});
    rules[47] = new Rule(-14, new int[]{26,26,-8});
    rules[48] = new Rule(-15, new int[]{-16});
    rules[49] = new Rule(-15, new int[]{-15,27,-16});
    rules[50] = new Rule(-15, new int[]{-15,28,-16});
    rules[51] = new Rule(-16, new int[]{-8});
    rules[52] = new Rule(-16, new int[]{-11});
    rules[53] = new Rule(-16, new int[]{22,-9,23});
    rules[54] = new Rule(-17, new int[]{-7});
    rules[55] = new Rule(-17, new int[]{-8});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
